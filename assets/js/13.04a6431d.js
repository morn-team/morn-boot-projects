(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{357:function(s,t,a){"use strict";a.r(t);var n=a(42),e=Object(n.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"json-序列化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#json-序列化"}},[s._v("#")]),s._v(" JSON 序列化")]),s._v(" "),a("p",[s._v("MornBoot提供JSON格式的序列化/反序列化组件，使开发人员不必关注业务框架中使用的是哪一款JSON库，MornBoot会自动选择可支持的JSON库运行，即使业务框架中集成了多套JSON库，MornBoot也能良好运行。")]),s._v(" "),a("blockquote",[a("p",[s._v("Since：v1.2.1")])]),s._v(" "),a("p",[s._v("当前支持：")]),s._v(" "),a("ul",[a("li",[s._v("FastJson")]),s._v(" "),a("li",[s._v("Jackson")])]),s._v(" "),a("p",[s._v("适用场景：")]),s._v(" "),a("ul",[a("li",[s._v("编写业务框架，需要支持多种JSON库")]),s._v(" "),a("li",[s._v("编写项目代码，不清楚JSON库之间的优劣")]),s._v(" "),a("li",[s._v("用FastJson的API调用灵活配置的Jackson")])]),s._v(" "),a("h3",{attrs:{id:"maven-dependency"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#maven-dependency"}},[s._v("#")]),s._v(" Maven Dependency")]),s._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("\x3c!--自动化配置--\x3e\n<dependency>\n  <groupId>site.morn.boot</groupId>\n  <artifactId>morn-boot-autoconfigure</artifactId>\n  <version>${morn.version}</version>\n</dependency>\n\x3c!--JSON--\x3e\n<dependency>\n  <groupId>site.morn.boot</groupId>\n  <artifactId>morn-boot-json</artifactId>\n  <version>${morn.version}</version>\n</dependency>\n")])])]),a("blockquote",[a("p",[s._v("注意：MornBoot默认没有主动加载任何JSON库，因此必须额外引入"),a("code",[s._v("FastJson")]),s._v("/"),a("code",[s._v("Jackson")]),s._v("的依赖。如果项目中已经集成了JSON库，则不用关注。")])]),s._v(" "),a("h3",{attrs:{id:"global-utils"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#global-utils"}},[s._v("#")]),s._v(" Global Utils")]),s._v(" "),a("p",[a("code",[s._v("JsonParsers")]),s._v("的用法非常基础，不作赘述。"),a("code",[s._v("JsonParsers")]),s._v("会使用"),a("code",[s._v("FastJson")]),s._v("作为首选JSON库。")]),s._v(" "),a("blockquote",[a("p",[s._v("避免泛型擦除时，需使用"),a("code",[s._v("Spring")]),s._v("的"),a("code",[s._v("ParameterizedTypeReference")]),s._v("消除对第三方JSON库的强依赖，而不是"),a("code",[s._v("FastJson")]),s._v("/"),a("code",[s._v("Jackson")]),s._v("的"),a("code",[s._v("TypeReference")]),s._v("。也可以使用"),a("code",[s._v("JDK")]),s._v("中的"),a("code",[s._v("Type")]),s._v("。")])]),s._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("JsonParsersTest")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  \n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("deserializeToMap")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("CriteriaMap")]),s._v(" user "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("JsonParsers")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("parseMap")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("USER1_STRING"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n  \n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("deserializeToObject1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("TestUser")]),s._v(" user "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("JsonParsers")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("parseObject")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("USER2_STRING"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("TestUser")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("deserializeToObject2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("List")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("TestUser")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" users "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("JsonParsers")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("parseObject")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("USERS_STRING"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ParameterizedTypeReference")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("List")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("TestUser")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n  \n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("serializeToString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" userString "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("JsonParsers")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("parseString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("USER1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])]),a("h3",{attrs:{id:"select-json-parser"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#select-json-parser"}},[s._v("#")]),s._v(" Select Json Parser")]),s._v(" "),a("p",[s._v("集成多个JSON库时，若有必要，可以主动选择JSON库进行解析。")]),s._v(" "),a("ol",[a("li",[a("code",[s._v("JsonParser")]),s._v("的集成方式依然是无入侵的，因此对"),a("code",[s._v("FastJson")]),s._v("/"),a("code",[s._v("Jackson")]),s._v("的全局配置，同时会对"),a("code",[s._v("JsonParser")]),s._v("生效。")]),s._v(" "),a("li",[s._v("因业务需要而切换JSON库的代价非常高，而MornBoot显然避免了这个问题。")])]),s._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("JsonParserTest")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("JsonParser")]),s._v(" parser1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("JsonParsers")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("getParser")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("FAST_JSON"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("JsonParser")]),s._v(" parser2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("JsonParsers")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("getParser")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("JACKSON"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])]),a("p",[a("code",[s._v("JsonParser")]),s._v("对象和"),a("code",[s._v("JsonParsers")]),s._v("工具类用法完全一致，不作赘述。")])])}),[],!1,null,null,null);t.default=e.exports}}]);