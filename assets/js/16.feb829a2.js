(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{405:function(e,n,a){"use strict";a.r(n);var t=a(52),r=Object(t.a)({},(function(){var e=this,n=e.$createElement,a=e._self._c||n;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"jpaassist-jpa工具"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#jpaassist-jpa工具"}},[e._v("#")]),e._v(" JpaAssist JPA工具")]),e._v(" "),a("p",[e._v("MornBoot提供JPA相关辅助功能，以简化JPA标准查询的开发工作。JPA标准查询封装度很高，有利于封装和重用，但代码冗长，可读性较低，而JPA Assist使JPA变得简洁、高效。")]),e._v(" "),a("blockquote",[a("p",[e._v("Since：v1.0.0")])]),e._v(" "),a("blockquote",[a("p",[e._v("SpringDataJPA标准查询围绕关键接口"),a("code",[e._v("JpaSpecificationExecutor<T>")]),e._v("和"),a("code",[e._v("Specification<T>")]),e._v("进行，主要构建"),a("code",[e._v("Specification<T>")]),e._v("对象后，调用"),a("code",[e._v("JpaSpecificationExecutor<T>")]),e._v("相关查询接口完成。JPA Assist的主要职责就是"),a("strong",[e._v("极简方式")]),e._v("构建"),a("code",[e._v("Specification<T>")]),e._v("对象。")])]),e._v(" "),a("h3",{attrs:{id:"必要配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#必要配置"}},[e._v("#")]),e._v(" 必要配置")]),e._v(" "),a("p",[e._v("Maven")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("\x3c!--Spring Boot Data JPA--\x3e\n<dependency>\n  <groupId>org.springframework.boot</groupId>\n  <artifactId>spring-boot-starter-data-jpa</artifactId>\n  <version>${boot.version}</version>\n</dependency>\n\x3c!--Morn JPA Assist--\x3e\n<dependency>\n  <groupId>site.morn.boot</groupId>\n  <artifactId>morn-boot-jpa</artifactId>\n  <version>${morn.version}</version>\n</dependency>\n")])])]),a("h3",{attrs:{id:"test-entity-repository"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#test-entity-repository"}},[e._v("#")]),e._v(" Test Entity & Repository")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("@Data\n@Entity\npublic class TestUser {\n\n  @Id\n  @GeneratedValue\n  private Long id;\n\n  @Column\n  private String username;\n\n  @Column\n  private String password;\n}\n\npublic interface TestUserRepository extends CrudRepository<TestUser, Long>,\n    JpaSpecificationExecutor<TestUser> {\n\n}\n")])])]),a("h3",{attrs:{id:"model-query"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#model-query"}},[e._v("#")]),e._v(" Model Query")]),e._v(" "),a("p",[e._v("基于实体模型获取属性和值，生成查询条件")]),e._v(" "),a("h4",{attrs:{id:"test-user-data"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#test-user-data"}},[e._v("#")]),e._v(" Test User Data")]),e._v(" "),a("div",{staticClass:"language-json extra-class"},[a("pre",{pre:!0,attrs:{class:"language-json"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[e._v('"id"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[e._v('"username"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"timely-rain"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[e._v('"password"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token null keyword"}},[e._v("null")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])])]),a("h4",{attrs:{id:"equal-all"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#equal-all"}},[e._v("#")]),e._v(" Equal All")]),e._v(" "),a("blockquote",[a("p",[a("code",[e._v("JpaBatchCondition#equalAll()")]),e._v("会检索实体类中的所有属性和值，并生成两者的"),a("code",[e._v("equal")]),e._v("条件。若无法属性/值中的一者，则忽略该属性。")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("@Autowired\nprivate TestUserRepository repository;\n\nprivate List<TestUser> equalAll(TestUser user) {\n  // 构建查询条件\n  SpecificationFunction specificationFunction = (reference, restrain, condition) -> {\n\n    // WHERE id = 1 AND username = 'timely-rain'\n    // password为空，所以忽略\n    Predicate[] equalAll = condition.equalAll();\n\n    restrain.appendAnd(equalAll);\n  };\n  Specification<TestUser> specification = SpecificationBuilder.withParameter(user)\n      .specification(specificationFunction);\n  return repository.findAll(specification);\n}\n")])])]),a("h3",{attrs:{id:"data-query"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#data-query"}},[e._v("#")]),e._v(" Data Query")]),e._v(" "),a("p",[e._v("很多情况下，"),a("code",[e._v("Entity")]),e._v("无法携带特殊的数据格式，而"),a("code",[e._v("@Transient")]),e._v("会让实体类变得冗长。因此，"),a("code",[e._v("JPA Assist")]),e._v("提供Map的传参形式。")]),e._v(" "),a("h4",{attrs:{id:"test-attach-data"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#test-attach-data"}},[e._v("#")]),e._v(" Test Attach Data")]),e._v(" "),a("div",{staticClass:"language-json extra-class"},[a("pre",{pre:!0,attrs:{class:"language-json"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[e._v('"keywords"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"timely"')]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])])]),a("h4",{attrs:{id:"contain"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#contain"}},[e._v("#")]),e._v(" Contain")]),e._v(" "),a("blockquote",[a("p",[a("code",[e._v("JpaCondition#contain(String name, String valueName)")]),e._v("对应SQL的"),a("code",[e._v("LIKE %something%")]),e._v("，"),a("code",[e._v("name")]),e._v("引用实体类属性，而"),a("code",[e._v("valueName")]),e._v("引用"),a("code",[e._v("model")]),e._v("中的值，若"),a("code",[e._v("model")]),e._v("中不存在该值时，则从"),a("code",[e._v("attach")]),e._v("中获取。")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('@Autowired\nprivate TestUserRepository repository;\n\nprivate List<TestUser> contains(TestUser user, CriteriaMap attach) {\n  SpecificationFunction specificationFunction = (reference, restrain, condition) -> {\n\n    // WHERE id = 1\n    // password为空，所以忽略\n    Predicate[] equals = condition.equals("id", "password");\n\n    // AND username LIKE \'%timely%\'\n    Predicate keywords = condition.contain("username", "keywords");\n\n    restrain.appendAnd(restrain.mergeAnd(equals), keywords);\n  };\n  Specification<TestUser> specification = SpecificationBuilder.withParameter(user, attach)\n      .specification(specificationFunction);\n  return repository.findAll(specification);\n}\n')])])]),a("h3",{attrs:{id:"jpa-query"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#jpa-query"}},[e._v("#")]),e._v(" JPA Query")]),e._v(" "),a("p",[a("code",[e._v("JPA Assist")]),e._v("目前的API并不多，有些时候仍需要使用JPA原生API。对比"),a("code",[e._v("Model Query")]),e._v("，这里的代码明显多了不少。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('public void equals() {\n  // 构建查询条件\n  SpecificationFunction specificationFunction = (reference, restrain, condition) -> {\n\n    Root root = reference.root();\n    CriteriaBuilder builder = reference.builder();\n\n    // WHERE id = 1\n    if (Objects.nonNull(user.getId())) {\n      Predicate id = builder.equal(root.get("id"), user.getId());\n      restrain.appendAnd(id);\n    }\n\n    // AND username = \'timely-rain\'\n    if (!StringUtils.isEmpty(user.getUsername())) {\n      Predicate username = builder.equal(root.get("username"), user.getUsername());\n      restrain.appendAnd(username);\n    }\n  };\n  Specification<TestUser> specification = SpecificationBuilder.withParameter(user)\n      .specification(specificationFunction);\n  repository.findAll(specification);\n}\n')])])]),a("h3",{attrs:{id:"api-condition"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#api-condition"}},[e._v("#")]),e._v(" API Condition")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("/**\n * 等于\n *\n * @param name 实体属性名称，数据属性名称\n * @return 查询断言\n * @see javax.persistence.criteria.CriteriaBuilder#equal(Expression, Object)\n */\nPredicate equal(String name);\n\n/**\n * 等于\n *\n * @param name 实体属性名称\n * @param valueName 数据属性名称\n * @return 查询断言\n * @see javax.persistence.criteria.CriteriaBuilder#equal(Expression, Object)\n */\nPredicate equal(String name, String valueName);\n\n/**\n * 不等\n *\n * @param name 实体属性名称，数据属性名称\n * @return 查询断言\n * @see javax.persistence.criteria.CriteriaBuilder#notEqual(Expression, Object)\n */\nPredicate notEqual(String name);\n\n/**\n * 不等\n *\n * @param name 实体属性名称\n * @param valueName 数据属性名称\n * @return 查询断言\n * @see javax.persistence.criteria.CriteriaBuilder#notEqual(Expression, Object)\n */\nPredicate notEqual(String name, String valueName);\n\n/**\n * 在...内\n *\n * @param name 实体属性名称，数据属性名称\n * @return 查询断言\n * @see Expression#in(Object...)\n */\nPredicate in(String name);\n\n/**\n * 包含\n *\n * @param name 实体属性名称，数据属性名称\n * @return 查询断言\n * @see javax.persistence.criteria.CriteriaBuilder#like(Expression, String)\n */\nPredicate contain(String name);\n\n/**\n * 包含\n *\n * @param name 实体属性名称\n * @param valueName 数据属性名称\n * @return 查询断言\n * @see javax.persistence.criteria.CriteriaBuilder#like(Expression, String)\n */\nPredicate contain(String name, String valueName);\n\n/**\n * 以...开始\n *\n * @param name 实体属性名称，数据属性名称\n * @return 查询断言\n * @see javax.persistence.criteria.CriteriaBuilder#like(Expression, String)\n */\nPredicate startWith(String name);\n\n/**\n * 以...结束\n *\n * @param name 实体属性名称，数据属性名称\n * @return 查询断言\n * @see javax.persistence.criteria.CriteriaBuilder#like(Expression, String)\n */\nPredicate endWith(String name);\n")])])])])}),[],!1,null,null,null);n.default=r.exports}}]);